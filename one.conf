input {
lumberjack {
type => "syslog"
port => 5000
ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
  }

file {
  type => "yahoo_stock"
  path => "/home/avashist/Downloads/yahoo_stock.csv"
  start_position => "beginning"    
 }

file {
type => "web" 
path => "/var/log/nginx/access.log"
 }
}

filter {
  if [type] == "syslog" {
grok {
  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
  add_field => [ "received_at", "%{@timestamp}" ]
  add_field => [ "received_from", "%{host}" ]
}
syslog_pri { }
date {
  match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
}
}

if [type] == "yahoo_stock" {
  csv {
      separator => ","
      columns => ["Date","Open","High","Low","Close","Volume","Adj Close"]
  }
  mutate {convert => ["High", "float"]}
  mutate {convert => ["Open", "float"]}
  mutate {convert => ["Low", "float"]}
  mutate {convert => ["Close", "float"]}
  mutate {convert => ["Volume", "float"]}
}

if [type] == "web" {
 grok { 
match => { "message" => '%{IPORHOST:clientip} - %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:respose:int} %{NUMBER:bytes:int} %{QS:referrer_url} %{QS:agent}' } 
add_field => [ "received_at", "%{@timestamp}" ]
  add_field => [ "received_from", "%{host}" ]
 }
date {
  match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
}

geoip {
source => "clientip"
}
useragent {
	source => "agent"
	target => "useragent"

}
}
}

output {
 if [type] == "syslog" {
  elasticsearch { 
  host => "base.vashist.com" 
  index => "syslog_indx"
  protocol => "transport" }
  stdout { codec => rubydebug }
}
if [type] == "yahoo_stock" { 
    elasticsearch {
  	host => "base.vashist.com" 
  	index => "stock_indx"
        action => "index"
        workers => 1
    }
    stdout {}
}
if [type] == "web" {
  elasticsearch { 
  host => "base.vashist.com" 
  index => "web_indx"
  protocol => "transport" }
  stdout { codec => rubydebug }
  
}
}
